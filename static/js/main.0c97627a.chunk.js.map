{"version":3,"sources":["components/MovieItem.jsx","components/MovieTabs.jsx","components/App.js","components/settings/api.js","index.js"],"names":["MovieItem","React","Component","constructor","props","super","this","state","willWatch","render","movie","addMoviesToWillWatch","removeMovie","removeMovieFromWillWatch","className","src","backdrop_path","poster_path","alt","title","vote_average","type","onClick","setState","bind","MovieTabs","sort_by","updateSortBy","updateNumberPage","changePage","value","handleClick","getClassLink","App","getPages","getMovies","url","page","fetch","then","data","json","movies","results","total_pages","updateMovies","filter","item","id","updateMoviesWillWatch","moviesWillWatch","count","console","log","componentDidMount","componentDidUpdate","prevProps","prevState","setTimeout","total","totalPage","map","key","length","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0c97627a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass MovieItem extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      willWatch: false,\r\n    };\r\n  }\r\n  // Метод componentWillUnmount возвращает размонтированные элементы после обновления\r\n  // componentWillUnmount(){\r\n  //   console.log('unmount:\\t', this.props.movie.title);\r\n  // }\r\n  render() {\r\n    const {\r\n      movie,\r\n      addMoviesToWillWatch,\r\n      removeMovie,\r\n      removeMovieFromWillWatch,\r\n    } = this.props;\r\n    // console.log(addMoviesToWillWatch);\r\n    \r\n    return (\r\n      /* <button onClick={removeMovie.bind(this, movie)}>Remove movie</button> */\r\n      /* </div> */\r\n      <div className=\"card\">\r\n        <img\r\n          className=\"card-img-top\"\r\n          src={`https://image.tmdb.org/t/p/w500${\r\n            movie.backdrop_path || movie.poster_path\r\n          }`}\r\n          alt=\"\"\r\n        />\r\n        <div className=\"card-body\">\r\n          <h6 className=\"card-title\">{movie.title}</h6>\r\n          <div className=\"d-flex justify-content-between align-items-center\">\r\n            <p className=\"mb-0\">Rating: {movie.vote_average}</p>\r\n\r\n            {this.state.willWatch === true ? (\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-success btn-sm\"\r\n                onClick={() => {\r\n                  this.setState({ willWatch: false });\r\n                  removeMovieFromWillWatch(movie);\r\n                }}\r\n              >\r\n                Remove Watch\r\n              </button>\r\n            ) : (\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-secondary btn-sm\"\r\n                onClick={() => {\r\n                  this.setState({ willWatch: true });\r\n                  addMoviesToWillWatch(movie);\r\n                  \r\n                }}\r\n              >\r\n                Will Watch\r\n              </button>\r\n            )}\r\n            {/* В ф-цию  MovieItem привязывяем контекст из Арр через bind и передаем в addMoviesToWillWatch() аргкментом movie */}\r\n          </div>\r\n          {/* В ф-цию  MovieItem привязывяем контекст из Арр через bind и передаем в removeMovie() аргкментом movie */}\r\n          <button\r\n            className=\"btn btn-outline-primary btn-sm\"\r\n            onClick={removeMovie.bind(null, movie)}\r\n          >\r\n            Remove movie\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default MovieItem;\r\n","import React from \"react\";\r\n\r\nclass MovieTabs extends React.Component {\r\n  // Данный метод делает проверку пропсов или стейта на изменение и говорить реакту, что, еслил изменеий небыло, то не делай render лишний раз\r\n  // shouldComponentUpdate(nextProps, nextState) {\r\n  //   if (nextProps.sort_by !== this.props.sort_by) {\r\n  //     return true;\r\n  //   } else {\r\n  //     return false;\r\n  //   }\r\n  // }\r\n\r\n  render() {\r\n    const {\r\n      sort_by,\r\n      updateSortBy,\r\n      updateNumberPage,\r\n    } = this.props;\r\n    // Функция handleClick принимает аргумент строку как value, которая возвращает ф-цию event и внутри updateSortBy(value)\r\n    //   Ниже приведена развернутая запись\r\n    /*const handleClick = value => {\r\n        return (event) => {\r\n            updateSortBy(value)\r\n        };}\r\n////////////////////////////////////////        \r\n        <div onClick={event=> {\r\n              updateSortBy(\"popularity.desc\")\r\n            }}>\r\n        </div> **/\r\n    // const getPageLinck = (value) =>{}\r\n\r\n    const changePage = (value) => ()=> updateNumberPage(value);\r\n    // const getPageName = value => \r\n    const handleClick = (value) => () => updateSortBy(value);\r\n    const getClassLink = (value) =>\r\n      `nav-link ${sort_by === value ? \"active\" : \"\"} `;\r\n\r\n    return (\r\n      <ul className=\"tabs nav nav-pills\">\r\n        <li className=\"nav-item\">\r\n          <div\r\n            onClick={handleClick(\"popularity.desc\")}\r\n            className={getClassLink(\"popularity.desc\")}\r\n          >\r\n            Popularyty desc\r\n          </div>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <div\r\n            onClick={handleClick(\"revenue.desc\")}\r\n            className={getClassLink(\"revenue.desc\")}\r\n          >\r\n            Revenue desc\r\n          </div>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <div\r\n            onClick={handleClick(\"vote_average.desc\")}\r\n            className={`nav-link ${\r\n              sort_by === \"vote_average.desc\"\r\n                ? \"active\"\r\n                : \"\" /*Развернутое представление строкам className выше**/\r\n            } `}\r\n          >\r\n            Vote avetage desc\r\n          </div>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <div\r\n            \r\n            onClick={changePage(\"prev\")}\r\n            className=\"nav-link\"\r\n          >\r\n            Prev page\r\n          </div>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <div\r\n            className=\"nav-link\"\r\n            onClick={changePage(\"next\")}\r\n          >\r\n            Next Page\r\n          </div>\r\n        </li>\r\n      </ul>\r\n    );\r\n  }\r\n}\r\nexport default MovieTabs;\r\n","import React from 'react';\r\n// import { moviesData } from './settings/MovieData'\r\nimport { API_URL, API_KEY_3 } from './settings/api'\r\nimport './style.scss';\r\nimport MovieItem from './MovieItem';\r\nimport MovieTabs from './MovieTabs';\r\n\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      movies: [],\r\n      moviesWillWatch: [],\r\n      sort_by: 'popularity.desc',\r\n      page: 1,\r\n      total_pages: '',\r\n    };\r\n    this.getPages();\r\n  }\r\n\r\n  componentDidMount() {\r\n    // console.log('did mount');\r\n    this.getMovies();\r\n  }\r\n  //Данный метод предоставляет предыдущее и измененное значение пропса и стейта\r\n  componentDidUpdate(prevProps, prevState) {\r\n    // console.log('prev:\\t', prevProps, prevState);\r\n    // console.log('this:\\t', this.props, this.state);\r\n    if (prevState.sort_by !== this.state.sort_by) {\r\n      // console.log('call api');\r\n      this.getMovies();\r\n    }\r\n    if (prevState.page !== this.state.page) {\r\n      setTimeout(() => {\r\n        this.getMovies();\r\n      })\r\n\r\n    }\r\n    let total = this.state.total_pages;\r\n    if (prevState.page === '1' || this.state.page < 1) {\r\n      this.setState({ page: total })\r\n    }\r\n    if (this.state.page === total +1 ) {\r\n      this.setState({ page: 1 })\r\n    }\r\n    console.log(this.state.page);\r\n  }\r\n\r\n  getPages = () => {\r\n    this.updateNumberPage();\r\n  }\r\n\r\n  getMovies = () => {\r\n    const url = `${API_URL}/discover/movie?api_key=${API_KEY_3}&sort_by=${this.state.sort_by}&page=${this.state.page}`;\r\n    fetch(url)\r\n      .then(data => {\r\n        return data.json();\r\n      })\r\n      .then(data => {\r\n        this.setState({ movies: data.results })\r\n        this.setState({ total_pages: data.total_pages })\r\n      })\r\n  }\r\n\r\n  removeMovie = movie => {\r\n    const updateMovies = this.state.movies.filter(item => {\r\n      return item.id !== movie.id;\r\n    })\r\n    this.setState({ movies: updateMovies })\r\n  };\r\n\r\n  addMoviesToWillWatch = movie => {\r\n    const updateMoviesWillWatch = [...this.state.moviesWillWatch, movie]\r\n    this.setState({ moviesWillWatch: updateMoviesWillWatch })\r\n  }\r\n  removeMovieFromWillWatch = movie => {\r\n    const updateMoviesWillWatch = this.state.moviesWillWatch.filter(item => {\r\n      return item.id !== movie.id;\r\n    })\r\n    this.setState({ moviesWillWatch: updateMoviesWillWatch })\r\n  }\r\n\r\n  updateSortBy = value => this.setState({ sort_by: value });\r\n  updateNumberPage = (value) => {\r\n    let count = this.state.page;\r\n    if (value === \"next\") {\r\n      this.setState({ page: count + 1 })\r\n    }\r\n    if (value === \"prev\") {\r\n      this.setState({ page: count - 1 })\r\n    }\r\n    console.log(value);\r\n  };\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <div className='row mt-4'>\r\n          <div className='col-9'>\r\n            <div className='row mb-4'>\r\n            <div className=\"col-3\">\r\n            <h4>Page {\"\\t\" + this.state.page + \"\\t\"} of {\"\\t\" + this.state.total_pages}</h4>\r\n          </div>\r\n              <div className='col-12'>\r\n                <MovieTabs\r\n                  page={this.state.page}\r\n                  totalPage={this.state.total_pages}\r\n                  updateNumberPage={this.updateNumberPage}\r\n                  sort_by={this.state.sort_by}\r\n                  updateSortBy={this.updateSortBy} />\r\n\r\n              </div>\r\n            </div>\r\n            <div className='row'>\r\n              {this.state.movies.map(movie => {\r\n                return (\r\n                  <div className='col-6 mb-4' key={movie.id}>\r\n                    <MovieItem\r\n                      movie={movie}\r\n                      removeMovie={this.removeMovie}\r\n                      addMoviesToWillWatch={this.addMoviesToWillWatch}\r\n                      removeMovieFromWillWatch={this.removeMovieFromWillWatch}\r\n                    />\r\n                  </div>\r\n                )\r\n              })}\r\n            </div>\r\n          </div>\r\n          <div className='col-3'>\r\n            {/* <p>Will watch: {this.state.moviesWillWatch.length}</p> */}\r\n            <h4>Will Watch: {this.state.moviesWillWatch.length} movies</h4>\r\n            <ul className=\"list-group\">\r\n              {this.state.moviesWillWatch.map(movie => (\r\n                <li key={movie.id} className=\"list-group-item\">\r\n                  <div className=\"d-flex justify-content-between\">\r\n                    {/* <img src={`https://image.tmdb.org/t/p/w500${movie.backdrop_path || movie.poster_path}`} alt=\"\" height='auto' width='40' /> */}\r\n                    <p>{movie.title}</p>\r\n                    <p>{movie.vote_average}</p>\r\n                  </div>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n          <div className=\"col-3\">\r\n            <h4>Page {\"\\t\" + this.state.page + \"\\t\"} of {\"\\t\" + this.state.total_pages}</h4>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","export const API_URL = \"https://api.themoviedb.org/3\";\r\n\r\nexport const API_KEY_3 = \"3f4ca4f3a9750da53450646ced312397\";\r\n\r\nexport const API_KEY_4 =\r\n  \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIzZjRjYTRmM2E5NzUwZGE1MzQ1MDY0NmNlZDMxMjM5NyIsInN1YiI6IjVhYzlmNWRkOTI1MTQxNjJhZTA1Njk0NiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.Fc4f9DVB6pFWh6hIjYe0NCC4pImdmNzDIfi_3Nb3tC4\";\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n"],"sourceRoot":""}